# -*- coding: utf-8 -*-
"""Códigos_protese_emg

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZO9-m0HFWq7idUZbVEvWP5n7v7VyeHbY

Esse é o código que está no diretório, que é usado para pegar os dados adquiridos por via serial e são armazenados no arquivoteste.txt
"""

import serial

# Instanciando Serial port
port = '/dev/ttyACM0'
baudrate = 9600
serial_connection = serial.Serial(port,baudrate)

# Path to destination
destination_file = "/home/lar-1480/ler_sinais/"

## Main function
file = open( destination_file + "arquivoteste.txt", "w")
print("FUncionou!!")
while True:
    print("Coletando dados!")
    data = serial_connection.read(128)
    if data == b"EOF":
        break
    print(data)
    file.write(data.decode("utf-8"))

# Terminando
file.close()
serial_connection.close()

"""Esse código está na main da raspberry, para ler uma onda quadrada"""

import machine
import utime

# Configurar o pino GPIO para gerar a onda quadrada (Pino 13)
pino_saida = machine.Pin(12, machine.Pin.OUT)

# Configurar o pino GPIO para ler a onda quadrada (Pino 14)
pino_entrada = machine.Pin(13, machine.Pin.IN)

# Definir a frequência da onda quadrada (em Hz)
frequencia = 1 # 1 Hz
periodo = 1.0/ frequencia  # Período da onda quadrada em segundos

# Tempo de execução (em segundos)
tempo_execucao = 120

# Tempo inicial
tempo_inicial = utime.ticks_ms()

# Função para imprimir tempo e amostra com 3 casas decimais
def imprimir_dados(tempo_decorrido, amostra):
    print(f"{tempo_decorrido:.2f} {amostra}")

# Função para calcular o tempo decorrido em segundos
def tempo_decorrido_segundos(tempo_inicial):
    return utime.ticks_diff(utime.ticks_ms(), tempo_inicial) / 1000

# Geração e leitura da onda quadrada
while True:
    # Gerar a onda quadrada (independente do estado de entrada)
    pino_saida.value(1)  # Definir o pino de saída como alto (HIGH)
    estado_entrada = pino_entrada.value()  # Ler o estado do pino de entrada
    imprimir_dados(tempo_decorrido_segundos(tempo_inicial), estado_entrada)
    utime.sleep(periodo / 2)  # Aguardar metade do período

    pino_saida.value(0)  # Definir o pino de saída como baixo (LOW)
    estado_entrada = pino_entrada.value()  # Ler o estado do pino de entrada
    imprimir_dados(tempo_decorrido_segundos(tempo_inicial), estado_entrada)
    utime.sleep(periodo / 2)  # Aguardar metade do período

    # Verificar se o tempo de execução foi atingido
    tempo_decorrido = tempo_decorrido_segundos(tempo_inicial)
    if tempo_decorrido >= tempo_execucao:
        break

# Exibir o tempo de execução total
print(f"Tempo de execução total: {tempo_decorrido:.2f}s")

"""Esse é o código que está no arduino para gerar uma onda de 500hz"""

const int outputPin = 8; // Define o pino de saída
const int frequency = 500; // Frequência em Hz
const int period = 1000000 / frequency; // Período em microsegundos
const int halfPeriod = period / 2; // Meio período

void setup() {
  // Configura o pino de saída
  pinMode(outputPin, OUTPUT);

  // Inicializa a comunicação serial a uma taxa de 9600 bauds
  Serial.begin(9600);
}

void loop() {
  // Gera a onda quadrada
  digitalWrite(outputPin, HIGH); // Liga o sinal
  Serial.println('1'); // Envia '1' para indicar HIGH
  delayMicroseconds(halfPeriod); // Aguarda meio período

  digitalWrite(outputPin, LOW); // Desliga o sinal
  Serial.println('0'); // Envia '0' para indicar LOW
  delayMicroseconds(halfPeriod); // Aguarda meio período
}